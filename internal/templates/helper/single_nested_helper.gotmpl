{{define "single_nested_helper"}}
func (m {{snakeCaseToCamelCase .Name}}Model) attributeType(ctx context.Context) attr.Type {
    return types.ObjectType{AttrTypes: m.objectAttributeTypes}
}

func (m {{snakeCaseToCamelCase .Name}}Model) objectAttributeTypes(ctx context.Context) map[string]attr.Type {
    return map[string]attr.Type{
        {{- template "attributes" .SingleNested }}
    }
}

func (m {{snakeCaseToCamelCase .Name}}Model) objectNull(ctx context.Context) types.Object {
    return types.ObjectNull(
        m.objectAttributeTypes(ctx),
    )
}

func (m {{snakeCaseToCamelCase .Name}}Model) objectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
    return types.ObjectValueFrom(
        ctx,
        m.objectAttributeTypes(ctx),
        data,
    )
}

{{/*{{- if .SingleNested.AssociatedExternalType}}*/}}
{{/*func {{snakeCaseToCamelCase .Name}}ModelFromCreateThingResponse(ctx context.Context, apiObject apisdkCreateThingResponse) ({{snakeCaseToCamelCase .Name}}Model, diag.Diagnostics) {*/}}
{{/*    var diags diag.Diagnostics*/}}
{{/*    var model {{snakeCaseToCamelCase .Name}}Model*/}}

{{/*    return model, diags*/}}
{{/*}*/}}
{{/*{{- end}}*/}}

{{- range $attribute := .SingleNested.Attributes}}
{{- if $attribute.SingleNested}}
{{- template "single_nested_helper" $attribute }}
{{- end}}
{{- end}}

{{- end}}